{"ast":null,"code":"var _class;\nimport { inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction ResetComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \"*Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \"*Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \"*Password didn't match\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport default class ResetComponent {\n  constructor() {\n    this.fb = inject(FormBuilder);\n  }\n  ngOnInit() {\n    this.resetForm = this.fb.group({\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required]\n    });\n  }\n  reset() {}\n}\n_class = ResetComponent;\n_class.ɵfac = function ResetComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-reset\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 15,\n  vars: 7,\n  consts: [[1, \"lg:w-3/12\", \"mt-10\", \"p-10\", \"shadow-lg\", \"mx-auto\"], [1, \"text-3xl\", \"text-bold\", \"py-5\"], [1, \"flex\", \"flex-col\", 3, \"formGroup\"], [1, \"mb-2\"], [1, \"flex\", \"flex-col\", \"mt-4\", \"mb-1\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\", 1, \"p-2\", \"border\", \"border-gray-300\", \"rounded\"], [\"class\", \"text-red-500\", 4, \"ngIf\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", \"placeholder\", \"Confirm Password\", 1, \"p-2\", \"border\", \"border-gray-300\", \"rounded\"], [1, \"bg-indigo-500\", \"w-1/4\", \"mr-3\", \"p-2\", \"rounded-md\", \"mt-3\", \"text-white\", \"align-item-right\", 3, \"disabled\", \"click\"], [1, \"text-red-500\"]],\n  template: function ResetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵtext(2, \"Reset your password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2)(4, \"span\", 3);\n      i0.ɵɵtext(5, \"Please use strong password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 4);\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵtemplate(8, ResetComponent_span_8_Template, 2, 0, \"span\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 4);\n      i0.ɵɵelement(10, \"input\", 7);\n      i0.ɵɵtemplate(11, ResetComponent_span_11_Template, 2, 0, \"span\", 6);\n      i0.ɵɵtemplate(12, ResetComponent_span_12_Template, 2, 0, \"span\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function ResetComponent_Template_button_click_13_listener() {\n        return ctx.reset();\n      });\n      i0.ɵɵtext(14, \" submit \");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetForm.hasError(\"required\", \"password\") && ctx.resetForm.controls[\"password\"].dirty);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetForm.hasError(\"required\", \"confirmPassword\") && ctx.resetForm.controls[\"confirmPassword\"].dirty);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetForm.hasError(\"confirmPasswordValidators\", \"confirmPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"disabled\", ctx.resetForm.invalid);\n      i0.ɵɵproperty(\"disabled\", ctx.resetForm.invalid);\n    }\n  },\n  dependencies: [CommonModule, i1.NgIf, ReactiveFormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["inject","CommonModule","FormBuilder","ReactiveFormsModule","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ResetComponent","constructor","fb","ngOnInit","resetForm","group","password","required","confirmPassword","reset","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ResetComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","ResetComponent_span_8_Template","ResetComponent_span_11_Template","ResetComponent_span_12_Template","ɵɵlistener","ResetComponent_Template_button_click_13_listener","ɵɵadvance","ɵɵproperty","hasError","controls","dirty","ɵɵclassProp","invalid","i1","NgIf","i2","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sources":["D:\\my-app\\MEANSTACK-APP\\client\\src\\app\\pages\\reset\\reset.component.ts","D:\\my-app\\MEANSTACK-APP\\client\\src\\app\\pages\\reset\\reset.component.html"],"sourcesContent":["import { Component, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-reset',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.scss'],\n})\nexport default class ResetComponent implements OnInit {\n  resetForm!: FormGroup;\n  fb = inject(FormBuilder);\n\n  ngOnInit() {\n    this.resetForm = this.fb.group({\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n    });\n  }\n  reset() {}\n}\n","<!-- <p>reset works!</p> -->\n<!-- <p>login works!</p> -->\n<div class=\"lg:w-3/12 mt-10 p-10 shadow-lg mx-auto\">\n  <h3 class=\"text-3xl text-bold py-5\">Reset your password</h3>\n  <form [formGroup]=\"resetForm\" class=\"flex flex-col\">\n    <span class=\"mb-2\">Please use strong password</span>\n    <div class=\"flex flex-col mt-4 mb-1\">\n      <input\n        formControlName=\"password\"\n        class=\"p-2 border border-gray-300 rounded\"\n        type=\"password\"\n        placeholder=\"Password\"\n      />\n      <span\n        *ngIf=\"\n          resetForm.hasError('required', 'password') &&\n          resetForm.controls['password'].dirty\n        \"\n        class=\"text-red-500\"\n        >*Password is required</span\n      >\n    </div>\n\n    <div class=\"flex flex-col mt-4 mb-1\">\n      <input\n        formControlName=\"confirmPassword\"\n        class=\"p-2 border border-gray-300 rounded\"\n        type=\"password\"\n        placeholder=\"Confirm Password\"\n      />\n      <span\n        *ngIf=\"\n          resetForm.hasError('required', 'confirmPassword') &&\n          resetForm.controls['confirmPassword'].dirty\n        \"\n        class=\"text-red-500\"\n        >*Confirm Password is required</span\n      >\n      <span\n        *ngIf=\"\n          resetForm.hasError('confirmPasswordValidators', 'confirmPassword')\n        \"\n        class=\"text-red-500\"\n        >*Password didn't match</span\n      >\n    </div>\n\n    <button\n      [disabled]=\"resetForm.invalid\"\n      [class.disabled]=\"resetForm.invalid\"\n      (click)=\"reset()\"\n      class=\"bg-indigo-500 w-1/4 mr-3 p-2 rounded-md mt-3 text-white align-item-right\"\n    >\n      submit\n    </button>\n  </form>\n</div>\n"],"mappings":";AAAA,SAA4BA,MAAM,QAAQ,eAAe;AACzD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SACEC,WAAW,EAEXC,mBAAmB,EACnBC,UAAU,QACL,gBAAgB;;;;;;ICMjBC,EAAA,CAAAC,cAAA,cAMG;IAAAD,EAAA,CAAAE,MAAA,4BAAqB;IAAAF,EAAA,CAAAG,YAAA,EACvB;;;;;IAUDH,EAAA,CAAAC,cAAA,cAMG;IAAAD,EAAA,CAAAE,MAAA,oCAA6B;IAAAF,EAAA,CAAAG,YAAA,EAC/B;;;;;IACDH,EAAA,CAAAC,cAAA,cAKG;IAAAD,EAAA,CAAAE,MAAA,6BAAsB;IAAAF,EAAA,CAAAG,YAAA,EACxB;;;AD5BP,eAAc,MAAOC,cAAc;EAPnCC,YAAA;IASE,KAAAC,EAAE,GAAGX,MAAM,CAACE,WAAW,CAAC;;EAExBU,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MACnCC,eAAe,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ;KAC1C,CAAC;EACJ;EACAE,KAAKA,CAAA,GAAI;;SAVUT,cAAc;;mBAAdA,MAAc;AAAA;;QAAdA,MAAc;EAAAU,SAAA;EAAAC,UAAA;EAAAC,QAAA,GAAAhB,EAAA,CAAAiB,mBAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCdnCvB,EAAA,CAAAC,cAAA,aAAoD;MACdD,EAAA,CAAAE,MAAA,0BAAmB;MAAAF,EAAA,CAAAG,YAAA,EAAK;MAC5DH,EAAA,CAAAC,cAAA,cAAoD;MAC/BD,EAAA,CAAAE,MAAA,iCAA0B;MAAAF,EAAA,CAAAG,YAAA,EAAO;MACpDH,EAAA,CAAAC,cAAA,aAAqC;MACnCD,EAAA,CAAAyB,SAAA,eAKE;MACFzB,EAAA,CAAA0B,UAAA,IAAAC,8BAAA,kBAOC;MACH3B,EAAA,CAAAG,YAAA,EAAM;MAENH,EAAA,CAAAC,cAAA,aAAqC;MACnCD,EAAA,CAAAyB,SAAA,gBAKE;MACFzB,EAAA,CAAA0B,UAAA,KAAAE,+BAAA,kBAOC;MACD5B,EAAA,CAAA0B,UAAA,KAAAG,+BAAA,kBAMC;MACH7B,EAAA,CAAAG,YAAA,EAAM;MAENH,EAAA,CAAAC,cAAA,iBAKC;MAFCD,EAAA,CAAA8B,UAAA,mBAAAC,iDAAA;QAAA,OAASP,GAAA,CAAAX,KAAA,EAAO;MAAA,EAAC;MAGjBb,EAAA,CAAAE,MAAA,gBACF;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;MAlDLH,EAAA,CAAAgC,SAAA,GAAuB;MAAvBhC,EAAA,CAAAiC,UAAA,cAAAT,GAAA,CAAAhB,SAAA,CAAuB;MAUtBR,EAAA,CAAAgC,SAAA,GAIT;MAJShC,EAAA,CAAAiC,UAAA,SAAAT,GAAA,CAAAhB,SAAA,CAAA0B,QAAA,4BAAAV,GAAA,CAAAhB,SAAA,CAAA2B,QAAA,aAAAC,KAAA,CAIT;MAaSpC,EAAA,CAAAgC,SAAA,GAIT;MAJShC,EAAA,CAAAiC,UAAA,SAAAT,GAAA,CAAAhB,SAAA,CAAA0B,QAAA,mCAAAV,GAAA,CAAAhB,SAAA,CAAA2B,QAAA,oBAAAC,KAAA,CAIT;MAISpC,EAAA,CAAAgC,SAAA,GAGT;MAHShC,EAAA,CAAAiC,UAAA,SAAAT,GAAA,CAAAhB,SAAA,CAAA0B,QAAA,iDAGT;MAOMlC,EAAA,CAAAgC,SAAA,GAAoC;MAApChC,EAAA,CAAAqC,WAAA,aAAAb,GAAA,CAAAhB,SAAA,CAAA8B,OAAA,CAAoC;MADpCtC,EAAA,CAAAiC,UAAA,aAAAT,GAAA,CAAAhB,SAAA,CAAA8B,OAAA,CAA8B;;;iBDpCxB1C,YAAY,EAAA2C,EAAA,CAAAC,IAAA,EAAE1C,mBAAmB,EAAA2C,EAAA,CAAAC,aAAA,EAAAD,EAAA,CAAAE,oBAAA,EAAAF,EAAA,CAAAG,eAAA,EAAAH,EAAA,CAAAI,oBAAA,EAAAJ,EAAA,CAAAK,kBAAA,EAAAL,EAAA,CAAAM,eAAA;EAAAC,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}